//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Web;

    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.BuyerReqs = new HashSet<BuyerReq>();
            this.NoteDetails = new HashSet<NoteDetail>();
            this.Reviews = new HashSet<Review>();
            this.Spams = new HashSet<Spam>();
        }
    
        public int user_id { get; set; }

        [Display(Name = "First Name")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your First Name")]
        public string Fname { get; set; }

        [Display(Name = "Last Name")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Last Name")]
        public string Lname { get; set; }

        [Display(Name = "Email Address")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Email Address")]
        public string Email { get; set; }

        public bool IsEmailVerified { get; set; }

        [Display(Name = "Password")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Password")]
        [MinLength(6, ErrorMessage = "Minimum 6 Characters Are Required.")]
        public string Password { get; set; }

        [Display(Name = "Confirm Password")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Re-Enter Your Password")]
        [Compare("Password", ErrorMessage = "Password Does Not Match.")]
        public string Confirm_Password { get; set; }

        [Display(Name = "Date Of Birth")]
        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> DOB { get; set; }

        [Display(Name = "Gender")]
        public string Gender { get; set; }

        [Display(Name = "Phone Number")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Phone Number")]
        [RegularExpression(@"^(\d{10})$", ErrorMessage = "Wrong mobile")]
        public string Phone_Number { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Select Your Country Code")]
        public string Phone_Number_Country_Code { get; set; }

        [Display(Name = "Profile Picture")]
        public string Profile_Picture { get; set; }

        [Display(Name = "Address Line 1")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Address")]
        public string Address_1 { get; set; }

        [Display(Name = "Address Line 2")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Address")]
        public string Address_2 { get; set; }

        [Display(Name = "ZipCode")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Zip Code")]
        public string ZipCode { get; set; }

        [Display(Name = "City")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your City")]
        public string City { get; set; }

        [Display(Name = "State")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your State")]
        public string State { get; set; }

        [Display(Name = "Country")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Country")]
        public string Country { get; set; }

        public string College { get; set; }
        public string University { get; set; }
        public System.DateTime Created_Date { get; set; }
        public Nullable<int> Created_By { get; set; }
        public Nullable<System.DateTime> Modified_Date { get; set; }
        public Nullable<int> Modified_By { get; set; }
        public Nullable<System.DateTime> Deactivated_Date { get; set; }
        public Nullable<int> Deactivated_By { get; set; }
        public bool IsActive { get; set; }
        public Nullable<System.Guid> Activation_Code { get; set; }


        [Display(Name = "Remember Me")]
        public bool remember_me { get; set; }

        public HttpPostedFileBase Dummy { get; set; }

        public string ReturnUrl { get; set; }

        [Display(Name = "New Password")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Enter Your Password")]
        [MinLength(6, ErrorMessage = "Minimum 6 Characters Are Required.")]
        public string New_Password { get; set; }

        [Display(Name = "Confirm Password")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Re-Enter Your Password")]
        [Compare("Password", ErrorMessage = "Password Does Not Match.")]
        public string New_Confirm_Password { get; set; }


        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<BuyerReq> BuyerReqs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<NoteDetail> NoteDetails { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Review> Reviews { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Spam> Spams { get; set; }
    }
}
